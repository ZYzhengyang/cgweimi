generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  username  String     @unique
  password  String
  isAdmin   Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  downloads Download[]
  favorites Favorite[]
  orders    Order[]
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  parentId    Int?
  level       Int        @default(1)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
}

model Tag {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  products  ProductTag[]
}

model Product {
  id            Int          @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  coverImage    String
  previewIframe String?
  fileSize      Float
  downloadUrl   String
  brand         String?
  status        String       @default("active")
  categoryId    Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  downloads     Download[]
  favorites     Favorite[]
  orders        OrderItem[]
  category      Category     @relation(fields: [categoryId], references: [id])
  tags          ProductTag[]
}

model ProductTag {
  productId Int
  tagId     Int
  tag       Tag     @relation(fields: [tagId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@id([productId, tagId])
}

model Order {
  id            Int         @id @default(autoincrement())
  userId        Int
  totalAmount   Float
  status        String
  paymentMethod String?
  transactionId String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  price     Float
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
}

model Favorite {
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, productId])
}

model Download {
  id            Int       @id @default(autoincrement())
  userId        Int
  productId     Int
  downloadToken String?
  expiresAt     DateTime?
  downloadCount Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  product       Product   @relation(fields: [productId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
}
