// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  username         String    @unique
  password         String
  isAdmin          Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  orders           Order[]
  favorites        Favorite[]
  downloads        Download[]
}

// 产品分类
model Category {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  description      String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  products         Product[]
}

// 标签模型
model Tag {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  products         ProductTag[]
}

// 产品模型
model Product {
  id               Int       @id @default(autoincrement())
  name             String
  description      String?
  price            Float
  coverImage       String
  previewIframe    String?
  fileSize         Float     // 单位MB
  downloadUrl      String
  categoryId       Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  category         Category  @relation(fields: [categoryId], references: [id])
  tags             ProductTag[]
  orders           OrderItem[]
  favorites        Favorite[]
  downloads        Download[]
}

// 产品标签关联
model ProductTag {
  productId        Int
  tagId            Int
  product          Product   @relation(fields: [productId], references: [id])
  tag              Tag       @relation(fields: [tagId], references: [id])

  @@id([productId, tagId])
}

// 订单模型
model Order {
  id               Int       @id @default(autoincrement())
  userId           Int
  totalAmount      Float
  status           String    // pending, paid, cancelled
  paymentMethod    String?   // alipay, wechat
  transactionId    String?   // 支付平台交易ID
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id])
  items            OrderItem[]
}

// 订单项
model OrderItem {
  id               Int       @id @default(autoincrement())
  orderId          Int
  productId        Int
  price            Float
  createdAt        DateTime  @default(now())
  order            Order     @relation(fields: [orderId], references: [id])
  product          Product   @relation(fields: [productId], references: [id])
}

// 收藏
model Favorite {
  userId           Int
  productId        Int
  createdAt        DateTime  @default(now())
  user             User      @relation(fields: [userId], references: [id])
  product          Product   @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}

// 下载记录
model Download {
  id               Int       @id @default(autoincrement())
  userId           Int
  productId        Int
  downloadToken    String?
  expiresAt        DateTime?
  downloadCount    Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id])
  product          Product   @relation(fields: [productId], references: [id])
}
